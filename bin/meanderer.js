// Generated by Haxe 3.4.0
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var ValueType = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
Type.__name__ = true;
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_phantomjs_FileSystem = require("fs");
var js_phantomjs_System = require("system");
var js_phantomjs_WebPage = require("webpage");
var meanderer_Main = function() { };
meanderer_Main.__name__ = true;
meanderer_Main.main = function() {
	if(typeof window == "undefined"?true:!window.hasOwnProperty("phantom")) {
		return;
	}
	var args = js_phantomjs_System.args;
	var confFile = "config/conf.json";
	var n = args.length;
	var i = 1;
	while(i < n) {
		switch(args[i]) {
		case "-config":
			++i;
			if(n > i) {
				confFile = StringTools.trim(args[i]);
			} else {
				meanderer_Main.help();
			}
			break;
		case "-help":
			meanderer_Main.help();
			break;
		case "-quiet":
			meanderer_Main.quiet = true;
			break;
		default:
			meanderer_Main.help();
		}
		++i;
	}
	meanderer_Main.log("Meanderer - A random surfer.");
	if(!js_phantomjs_FileSystem.exists(confFile)) {
		meanderer_Main.log("File Error: Can't read the config json at: " + confFile);
		meanderer_Main.help();
	}
	meanderer_Main.config = JSON.parse(js_phantomjs_FileSystem.read(confFile));
	if(meanderer_Main.loadData()) {
		meanderer_Main.setupLogs();
		var _g = [];
		var _g2 = 0;
		var _g1 = meanderer_Main.config.meandererCount;
		while(_g2 < _g1) {
			_g2++;
			_g.push(meanderer_Meanderer.create());
		}
		meanderer_Main.agents = _g;
	}
};
meanderer_Main.help = function() {
	meanderer_Main.log("Usage: phantomjs bin/meanderer.js [-config path/to/config.json] [-quiet]");
	meanderer_Main.log("If not specified, config path defaults to config/conf.json");
	phantom.exit();
};
meanderer_Main.setupLogs = function() {
	if(meanderer_Main.config.logging.enabled) {
		var logFile = "" + meanderer_Main.config.logging.location + "/urls.log";
		if(!js_phantomjs_FileSystem.exists(logFile)) {
			js_phantomjs_FileSystem.write(logFile,"sessionTime,time,url\n","w");
		}
		var errorFile = "" + meanderer_Main.config.logging.location + "/error.log";
		if(!js_phantomjs_FileSystem.exists(errorFile)) {
			js_phantomjs_FileSystem.write(errorFile,"","w");
		}
	}
};
meanderer_Main.loadData = function() {
	if(!js_phantomjs_FileSystem.exists(meanderer_Main.config.userAgentsFile)) {
		meanderer_Main.log("File Error: Can't find userAgents file at \"" + meanderer_Main.config.userAgentsFile + "\"");
		meanderer_Main.log("Check the userAgentsFile property in the config json");
		meanderer_Main.help();
		return false;
	}
	if(!js_phantomjs_FileSystem.exists(meanderer_Main.config.dictionaryFile)) {
		meanderer_Main.log("File Error: Can't find dictionary file at \"" + meanderer_Main.config.dictionaryFile + "\"");
		meanderer_Main.log("Check the dictionaryFile property in the config json");
		meanderer_Main.help();
		return false;
	}
	meanderer_Main.uaStrings = js_phantomjs_FileSystem.read(meanderer_Main.config.userAgentsFile).split("\r").filter(function(ua) {
		return StringTools.trim(ua).length > 0;
	});
	meanderer_Main.log("Loaded " + meanderer_Main.uaStrings.length + " userAgent strings.");
	meanderer_Main.dictionary = JSON.parse(js_phantomjs_FileSystem.read(meanderer_Main.config.dictionaryFile));
	meanderer_Main.log("Loaded " + meanderer_Main.dictionary.length + " dictionary words.");
	return true;
};
meanderer_Main.kill = function(agent,repopulate) {
	if(repopulate == null) {
		repopulate = true;
	}
	var i = meanderer_Main.agents.length;
	while(i-- > 0) if(meanderer_Main.agents[i].id == agent.id) {
		agent.reset();
		agent = null;
		if(repopulate) {
			meanderer_Main.agents[i] = meanderer_Meanderer.create();
		} else {
			meanderer_Main.agents.splice(i,1);
		}
		break;
	}
};
meanderer_Main.log = function(a) {
	if(!meanderer_Main.quiet) {
		console.log(a);
	}
};
meanderer_Main.logError = function(a) {
	if(meanderer_Main.config.logging.enabled) {
		js_phantomjs_FileSystem.write("" + meanderer_Main.config.logging.location + "/error.log","" + Date.now() + " " + a + "\n","a");
	}
};
meanderer_Main.logURL = function(url,m) {
	if(meanderer_Main.config.logging.enabled) {
		js_phantomjs_FileSystem.write("" + meanderer_Main.config.logging.location + "/urls.log","" + m.sessionTime + "," + Date.now() + "," + url + "\n","a");
	}
};
meanderer_Main.addURL = function(url) {
	if(meanderer_Main.navigatedURLs.indexOf(url) != -1) {
		return;
	}
	meanderer_Main.navigatedURLs.push(url);
	if(meanderer_Main.navigatedURLs.length == meanderer_Main.maxURLHistory) {
		meanderer_Main.navigatedURLs.shift();
	}
};
var meanderer_Meanderer = function(id) {
	this.id = -1;
	this.loadTimer = -1;
	this.id = id;
	this.sessionTime = Date.now();
	this.sessionUA = meanderer_Util.randomItem(meanderer_Main.uaStrings);
	this.createPage();
	this.isSearch = true;
	this.openPage(meanderer_Util.buildRandomSearchQuery());
};
meanderer_Meanderer.__name__ = true;
meanderer_Meanderer.create = function() {
	return new meanderer_Meanderer(meanderer_Meanderer.ID++);
};
meanderer_Meanderer.prototype = {
	createPage: function() {
		this.page = js_phantomjs_WebPage.create();
		this.page.onError = $bind(this,this.onPageError);
		this.page.onLoadStarted = $bind(this,this.pageLoadStarted);
		this.page.onLoadFinished = $bind(this,this.pageLoaded);
		this.page.settings.userAgent = this.sessionUA;
		if(meanderer_Main.config.capture.enabled) {
			this.page.viewportSize = meanderer_Main.config.capture.viewport;
		}
	}
	,openPage: function(url) {
		window.clearTimeout(this.loadTimer);
		this.loadTimer = -1;
		this.loadStart = -1;
		meanderer_Main.log("[" + this.id + "] " + ("openPage: " + url));
		this.currentURL = url;
		meanderer_Main.addURL(url);
		meanderer_Main.logURL(url,this);
		this.stallTimer();
		this.page.open(url);
	}
	,stallTimer: function() {
		window.clearTimeout(this.loadTimer);
		this.loadTimer = window.setTimeout($bind(this,this.onLoadStalled),meanderer_Main.config.loadStallTimeout * 1000);
	}
	,onLoadStalled: function() {
		meanderer_Main.log("[" + this.id + "] " + "Page load stalled. Restarting.");
		meanderer_Main.kill(this);
	}
	,onPageError: function(message,stacktrace) {
		meanderer_Main.logError("[" + this.id + "] " + ("pageError - " + this.currentURL + " - " + message));
	}
	,pageLoadStarted: function() {
		this.stallTimer();
		this.loadStart = Date.now();
	}
	,pageLoaded: function(status,tries) {
		if(tries == null) {
			tries = 0;
		}
		window.clearTimeout(this.loadTimer);
		this.loadTimer = -1;
		if(status == "success") {
			if(this.page.evaluate(function() {
				return window.document.readyState;
			}) != "complete") {
				if(tries <= meanderer_Main.config.loadStallTimeout) {
					var f = $bind(this,this.pageLoaded);
					var a2 = tries + 1;
					this.loadTimer = window.setTimeout(function() {
						f("success",a2);
						return;
					},1000);
				} else {
					meanderer_Main.log("[" + this.id + "] " + "Page load stalled while waiting for readyState. Restarting.");
					meanderer_Main.kill(this);
				}
				return;
			}
			this.loadTimer = window.setTimeout($bind(this,this.processPage),2000);
		} else {
			meanderer_Main.log("[" + this.id + "] " + ("Could not load page. Status:" + status + ". Restarting"));
			meanderer_Main.kill(this);
		}
	}
	,processPage: function() {
		var _gthis = this;
		var time = Date.now();
		meanderer_Main.log("[" + this.id + "] " + ("Page ready, " + (time - this.loadStart) + "ms after load-start."));
		this.pageLocation = this.page.evaluate(function() {
			return window.document.location;
		});
		var links = meanderer_Util.processLinks(this.page,this.pageLocation,this.isSearch);
		meanderer_Util.processTextContent(this.page);
		links == null || links.length == 0;
		var conf = meanderer_Main.config;
		var capture = conf.capture;
		if(capture.enabled) {
			this.page.render("" + capture.location + "/" + this.sessionTime + "/" + time + "_" + this.pageLocation.hostname + "." + capture.options.format,capture.options);
		}
		this.reset();
		var wait = conf.interval.min + (Math.random() * conf.interval.max | 0);
		if(wait < 1) {
			wait = 1;
		}
		var next = this.getNextURL(this.pageLocation,links);
		meanderer_Main.log("[" + this.id + "] " + ("Next load in " + wait + " seconds: \"" + next + "\""));
		this.loadTimer = window.setTimeout(function() {
			_gthis.createPage();
			_gthis.openPage(next);
		},wait * 1000);
	}
	,getNextURL: function(current,pageLinks) {
		this.isSearch = false;
		var url = null;
		var lnk = meanderer_Util.randomItem(pageLinks);
		if(lnk != null) {
			url = lnk.protocol + "//" + lnk.hostname + lnk.pathname;
		}
		if(url == null || meanderer_Main.navigatedURLs.indexOf(url) != -1) {
			url = meanderer_Util.buildRandomSearchQuery();
			this.isSearch = true;
		}
		return url;
	}
	,reset: function() {
		window.clearTimeout(this.loadTimer);
		this.loadTimer = -1;
		try {
			this.page.onError = null;
			this.page.onLoadFinished = null;
			this.page.onLoadStarted = null;
			this.page.close();
			this.page.release();
			this.page = null;
		} catch( err ) {
			meanderer_Main.logError("[" + this.id + "] " + err);
		}
	}
	,__class__: meanderer_Meanderer
};
var meanderer_Util = function() { };
meanderer_Util.__name__ = true;
meanderer_Util.processTextContent = function(page) {
	var textContent = page.evaluate(function() {
		var txt = "";
		var pList = window.document.body.getElementsByTagName("p");
		var _g1 = 0;
		var _g = pList.length;
		while(_g1 < _g) txt += pList.item(_g1++).textContent + " ";
		return txt;
	});
	if(Type["typeof"](textContent) == ValueType.TNull || textContent.length == 0) {
		return;
	}
	var words = new EReg("\\W+","gi").split(StringTools.trim(textContent));
	var newUniqueWords = [];
	var counts = [];
	var _g2 = 0;
	while(_g2 < words.length) {
		var w = words[_g2];
		++_g2;
		if(w.length > 3 && w.length < 13) {
			w = w.toLowerCase();
			var uIndex = newUniqueWords.indexOf(w);
			if(uIndex == -1) {
				if(meanderer_Main.dictionary.indexOf(w) == -1) {
					newUniqueWords.push(w);
					counts.push(1);
				}
			} else {
				counts[uIndex]++;
			}
		}
	}
	var i = newUniqueWords.length - 1;
	while(i > 0) {
		if(counts[i] > 4) {
			counts.splice(i,1);
			newUniqueWords.splice(i,1);
		}
		--i;
	}
	if(newUniqueWords.length > 0) {
		meanderer_Util.uniqueWords = meanderer_Util.uniqueWords.concat(newUniqueWords);
		if(meanderer_Util.uniqueWords.length > meanderer_Util.maxUniqueWords) {
			meanderer_Util.uniqueWords.splice(0,meanderer_Util.uniqueWords.length - meanderer_Util.maxUniqueWords);
		}
	}
};
meanderer_Util.processLinks = function(page,pageLocation,ignoreRelative) {
	var data = page.evaluate(function() {
		var getAnchorValues = function(a) {
			return { protocol : a.protocol, hostname : a.hostname, port : a.port, pathname : a.pathname, search : a.search, hash : a.hash, href : a.getAttribute("href")};
		};
		var anchors = window.document.getElementsByTagName("a");
		if(anchors.length == 0) {
			return null;
		}
		var _g = [];
		var _g2 = 0;
		var _g1 = anchors.length;
		while(_g2 < _g1) _g.push(getAnchorValues(anchors.item(_g2++)));
		return _g;
	});
	data = meanderer_Util.filterLinks(data,ignoreRelative);
	return data;
};
meanderer_Util.filterLinks = function(data,ignoreRelative) {
	if(ignoreRelative == null) {
		ignoreRelative = false;
	}
	if(data == null || Type["typeof"](data) == ValueType.TNull || data.length == 0) {
		return null;
	}
	var m = [];
	var navigatedURLs = meanderer_Main.navigatedURLs;
	var ignore = meanderer_Main.config.ignoreLinksContaining;
	var allowedExtensions = meanderer_Main.config.allowedExtensions;
	var filtered = data.filter(function(a) {
		var _g = 0;
		while(_g < ignore.length) {
			var i = ignore[_g];
			++_g;
			if((a.hostname + a.pathname).indexOf(i) != -1) {
				return false;
			}
		}
		var simplified = a.hostname + a.pathname;
		if(m.indexOf(simplified) != -1) {
			return false;
		}
		m.push(simplified);
		if(navigatedURLs.indexOf(simplified) != -1) {
			return false;
		}
		var fileParts = a.pathname.split(".");
		if(fileParts.length > 1) {
			var ext = fileParts[fileParts.length - 1].toLowerCase();
			if(allowedExtensions.indexOf(ext) == -1) {
				return false;
			}
		}
		if(ignoreRelative && a.href.indexOf("/") == 0) {
			return false;
		}
		if(a.hash == "" && a.port == "" && a.protocol.indexOf("http") == 0) {
			return Std.parseInt(a.hostname.split(".")[0]) == null;
		} else {
			return false;
		}
	});
	if(filtered.length > 0) {
		return filtered;
	} else {
		return null;
	}
};
meanderer_Util.buildSearchPhrase = function(minWords,maxWords) {
	if(minWords < 1) {
		minWords = 1;
	}
	if(maxWords < minWords) {
		maxWords = minWords;
	}
	var count = minWords + Math.round(Math.random() * (maxWords - minWords));
	var phrase = "";
	meanderer_Main.dictionary.concat(meanderer_Util.uniqueWords);
	while(count-- > 0) {
		phrase += "" + meanderer_Util.randomItemOfItems([meanderer_Main.dictionary,meanderer_Util.uniqueWords]);
		if(count > 0) {
			phrase += " ";
		}
	}
	return encodeURIComponent(phrase);
};
meanderer_Util.buildRandomSearchQuery = function() {
	var conf = meanderer_Main.config.search;
	var searchURL = meanderer_Util.randomItem(meanderer_Main.config.search.urls);
	var offset = conf.offsetRange;
	searchURL = StringTools.replace(searchURL,"::offset::","" + (offset.min + (Math.random() * Math.random() * (offset.max - offset.min) | 0)));
	return StringTools.replace(searchURL,"::query::",meanderer_Util.buildSearchPhrase(conf.queryWords.min,conf.queryWords.max));
};
meanderer_Util.randomItem = function(src) {
	if(Type["typeof"](src) == ValueType.TNull || src.length == 0) {
		return null;
	}
	return src[Math.random() * src.length | 0];
};
meanderer_Util.randomItemOfItems = function(src) {
	if(Type["typeof"](src) == ValueType.TNull || src.length == 0) {
		return null;
	}
	var totalItems = 0;
	var _g = 0;
	while(_g < src.length) {
		var item = src[_g];
		++_g;
		totalItems += item.length;
	}
	if(totalItems == 0) {
		return null;
	}
	var idx = Math.random() * totalItems | 0;
	var _g1 = 0;
	while(_g1 < src.length) {
		var item1 = src[_g1];
		++_g1;
		if(idx < item1.length) {
			return item1[idx];
		}
		idx -= item1.length;
	}
	return null;
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
meanderer_Main.navigatedURLs = [];
meanderer_Main.maxURLHistory = 4096;
meanderer_Meanderer.ID = 0;
meanderer_Util.maxUniqueWords = 4096;
meanderer_Util.uniqueWords = [];
meanderer_Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
